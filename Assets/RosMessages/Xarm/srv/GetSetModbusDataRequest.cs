//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Xarm
{
    [Serializable]
    public class GetSetModbusDataRequest : Message
    {
        public const string k_RosMessageName = "xarm_msgs/GetSetModbusData";
        public override string RosMessageName => k_RosMessageName;

        //  unsigned char data to be sent to tool device through modbus
        public byte[] send_data;
        //  Specify the anticipated maximum respond data length in bytes
        public short respond_len;
        //  host id, 9: END RS485, 10: Controller RS485
        public byte host_id;
        //  whether to choose transparent transmission
        public bool is_transparent_transmission;
        //  whether to use port 503 for communication
        //  if it is true, it will connect to 503 port for communication when it is used for the first time, which is generally only useful for transparent transmission
        public bool use_503_port;

        public GetSetModbusDataRequest()
        {
            this.send_data = new byte[0];
            this.respond_len = 0;
            this.host_id = 0;
            this.is_transparent_transmission = false;
            this.use_503_port = false;
        }

        public GetSetModbusDataRequest(byte[] send_data, short respond_len, byte host_id, bool is_transparent_transmission, bool use_503_port)
        {
            this.send_data = send_data;
            this.respond_len = respond_len;
            this.host_id = host_id;
            this.is_transparent_transmission = is_transparent_transmission;
            this.use_503_port = use_503_port;
        }

        public static GetSetModbusDataRequest Deserialize(MessageDeserializer deserializer) => new GetSetModbusDataRequest(deserializer);

        private GetSetModbusDataRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.send_data, sizeof(byte), deserializer.ReadLength());
            deserializer.Read(out this.respond_len);
            deserializer.Read(out this.host_id);
            deserializer.Read(out this.is_transparent_transmission);
            deserializer.Read(out this.use_503_port);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.send_data);
            serializer.Write(this.send_data);
            serializer.Write(this.respond_len);
            serializer.Write(this.host_id);
            serializer.Write(this.is_transparent_transmission);
            serializer.Write(this.use_503_port);
        }

        public override string ToString()
        {
            return "GetSetModbusDataRequest: " +
            "\nsend_data: " + System.String.Join(", ", send_data.ToList()) +
            "\nrespond_len: " + respond_len.ToString() +
            "\nhost_id: " + host_id.ToString() +
            "\nis_transparent_transmission: " + is_transparent_transmission.ToString() +
            "\nuse_503_port: " + use_503_port.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
