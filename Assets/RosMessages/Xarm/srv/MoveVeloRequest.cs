//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Xarm
{
    [Serializable]
    public class MoveVeloRequest : Message
    {
        public const string k_RosMessageName = "xarm_msgs/MoveVelo";
        public override string RosMessageName => k_RosMessageName;

        //  request: command specification for velocity executions.
        //  Units:
        // 	joint space/angles: radian/s
        // 	Cartesian space: mm/s, radian/s.
        //  velocities: the velocity list of the joints/tcp
        //    For velo_move_joint service: [joint1_velocity, ..., joint7_velocity]
        //    For velo_move_line service: [x_velocity, y_velocity, z_velocity, rx_velocity, ry_velocity, rz_velocity (axis-angle)]
        public float[] velocities;
        //  jnt_sync: this is special for velo_move_joint service, meaning whether all joints accelerate and decelerate synchronously, 1 for yes, 0 for no.
        public short jnt_sync;
        //  coord: this is special for velo_move_line service, meaning whether motion is in tool coordinate(1) or not(0)
        public short coord;

        public MoveVeloRequest()
        {
            this.velocities = new float[0];
            this.jnt_sync = 0;
            this.coord = 0;
        }

        public MoveVeloRequest(float[] velocities, short jnt_sync, short coord)
        {
            this.velocities = velocities;
            this.jnt_sync = jnt_sync;
            this.coord = coord;
        }

        public static MoveVeloRequest Deserialize(MessageDeserializer deserializer) => new MoveVeloRequest(deserializer);

        private MoveVeloRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.velocities, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.jnt_sync);
            deserializer.Read(out this.coord);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.velocities);
            serializer.Write(this.velocities);
            serializer.Write(this.jnt_sync);
            serializer.Write(this.coord);
        }

        public override string ToString()
        {
            return "MoveVeloRequest: " +
            "\nvelocities: " + System.String.Join(", ", velocities.ToList()) +
            "\njnt_sync: " + jnt_sync.ToString() +
            "\ncoord: " + coord.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
