//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Xarm
{
    [Serializable]
    public class MoveAxisAngleRequest : Message
    {
        public const string k_RosMessageName = "xarm_msgs/MoveAxisAngle";
        public override string RosMessageName => k_RosMessageName;

        //  request: command specification for axis-angle motion executions.
        //  Units:
        // 	Linear: mm, mm/s, and mm/s^2.
        //    Angular: radian, radian/s and radian/s^2.
        // 	time: sec
        //  pose: target coordinate. 
        // 	For Cartesian target: pose dimention is 6 for (x, y, z, rx, ry, rz)
        public float[] pose;
        //  mvvelo: specified maximum velocity during execution. linear or angular velocity 
        public float mvvelo;
        //  mvacc: specified maximum acceleration during execution. linear or angular acceleration.
        public float mvacc;
        //  mvtime: currently do not have any special meaning, please just give it 0. 
        public float mvtime;
        //  coord: motion coordinate system indicator, base (0) or tool(1) coordinate.
        public short coord;
        //  relative: indicator of given target is relative (1) or not (0, absolute)
        public short relative;

        public MoveAxisAngleRequest()
        {
            this.pose = new float[0];
            this.mvvelo = 0.0f;
            this.mvacc = 0.0f;
            this.mvtime = 0.0f;
            this.coord = 0;
            this.relative = 0;
        }

        public MoveAxisAngleRequest(float[] pose, float mvvelo, float mvacc, float mvtime, short coord, short relative)
        {
            this.pose = pose;
            this.mvvelo = mvvelo;
            this.mvacc = mvacc;
            this.mvtime = mvtime;
            this.coord = coord;
            this.relative = relative;
        }

        public static MoveAxisAngleRequest Deserialize(MessageDeserializer deserializer) => new MoveAxisAngleRequest(deserializer);

        private MoveAxisAngleRequest(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.pose, sizeof(float), deserializer.ReadLength());
            deserializer.Read(out this.mvvelo);
            deserializer.Read(out this.mvacc);
            deserializer.Read(out this.mvtime);
            deserializer.Read(out this.coord);
            deserializer.Read(out this.relative);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.WriteLength(this.pose);
            serializer.Write(this.pose);
            serializer.Write(this.mvvelo);
            serializer.Write(this.mvacc);
            serializer.Write(this.mvtime);
            serializer.Write(this.coord);
            serializer.Write(this.relative);
        }

        public override string ToString()
        {
            return "MoveAxisAngleRequest: " +
            "\npose: " + System.String.Join(", ", pose.ToList()) +
            "\nmvvelo: " + mvvelo.ToString() +
            "\nmvacc: " + mvacc.ToString() +
            "\nmvtime: " + mvtime.ToString() +
            "\ncoord: " + coord.ToString() +
            "\nrelative: " + relative.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
